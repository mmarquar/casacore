import os
import sys

# Put the package name here, e.g. casa, tables
PACKAGE="coordinates"

# general options
opts = Options( 'options.cfg', ARGUMENTS )
opts.Add(ListOption("build", "The build type", 
                    "opt", ["opt", "dbg"]))
opts.Add(ListOption("libtype", "The type of library to build", 
                    "static", ["static", "shared"]))
opts.Add(BoolOption("tests", "Build the tests?", False))
opts.Add(PathOption("casacoredir", "The location of casacore/casa",
                    "/usr"))
opts.Add(("CC", "The c compiler", None))
opts.Add(("CXX", "The c++ compiler", None))
opts.Add(("CPPFLAGS", "Extra compiler flags ", None))
opts.Add(("FORTRAN", "The fortran compiler", None))
opts.Add(("f2clib", "The fortran to c library", None))
opts.Add(("lapackroot", 
          "The root directory where lapack is installed", None))
opts.Add(("lapacklibdir", "The lapack library location", None))
opts.Add(("lapacklib",
          "The lapack library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("blasroot", 
          "The root directory where blas is installed", None))
opts.Add(("blaslibdir", "The blas library location", None))
opts.Add(("blaslib",
          "The blas library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("cfitsioroot", 
          "The root directory where cfistio is installed", None))
opts.Add(("cfitsiolibdir", "The cfitsio library location", None))
opts.Add(("wcsroot", 
          "The root directory where wcs is installed", None))
opts.Add(("wcslibdir", "The wcs library location", None))
opts.Add(("wcsincdir", "The wcs header file location", None))

env = Environment(
		  ENV = { 'PATH' : os.environ[ 'PATH' ],
			  'HOME' : os.environ[ 'HOME' ]			  
			  },
		  options=opts
		  )
# keep a local sconsign database, rather than in very directory
env.SConsignFile()

env["PACKAGE"] = PACKAGE
if env["PACKAGE"] == "casa":
    # use build in dir
    env["casashrdir"] = ["./tools"]
    env["casalibdir"] = None
    env["casaincdir"] = None
else:
    # use directory from casacore/casa installation
    env["casaincdir"] = [os.path.join(env["casacoredir"],"include","casacore")]
    env["casalibdir"] = [os.path.join(env["casacoredir"],"lib")]
    env["casashrdir"] = [os.path.join(env["casacoredir"],"share","casacore")]

env.Tool('installer', env["casashrdir"])

# add installer options, e.g. prefix
env.AddInstallerOptions( opts )
# add them into environment
opts.Update( env )
# cache them for the next run
opts.Save( 'options.cfg', env)
Help( opts.GenerateHelpText( env ) )
env.Tool('buildenv', env["casashrdir"])
env.Tool('utils', env["casashrdir"])
env.Tool('casa', env["casashrdir"])

# Auto configure
if not env.GetOption('clean'):
    conf = Configure(env)
    conf.env.CheckFortran(conf)
    if not conf.CheckLib("m"): Exit(1)
    conf.env.PrependUnique(LIBS=["m"])
    # test for blas/lapack
    blasname = conf.env.get("blaslib", "blas")
    conf.env.AddCustomPackage("blas")
    if not conf.CheckLib(blasname, autoadd=0): Exit(1)
    conf.env.PrependUnique(LIBS=[blasname])
    lapackname = conf.env.get("lapacklib", "lapack")
    conf.env.AddCustomPackage("lapack")
    if not conf.CheckLib(lapackname, autoadd=0): Exit(1)
    conf.env.PrependUnique(LIBS=[lapackname])
    # test for cfitsio
    conf.env.AddCustomPackage('cfitsio')
    if not conf.CheckLib('cfitsio', autoadd=0):
        Exit(1)
    conf.env.PrependUnique(LIBS=['cfitsio'])

    conf.env.AddCustomPackage('wcs')
    if not conf.CheckLibWithHeader('wcs', 'wcslib/wcs.h', language='c',
				   autoadd=0):
	Exit(1)
    conf.env.PrependUnique(LIBS=['wcs'])
    env = conf.Finish()

# create the installer which handles installing the final build
installer = env.Installer()

# to find package based includes
env.Append(CPPPATH=['#'])
env.AppendUnique(CPPPATH=env["casaincdir"])
env.AppendUnique(LIBPATH=env["casalibdir"])
env.Prepend(LIBS=[ "casa_fits",
		  "casa_measures", "casa_scimath", "casa_scimath_f", 
		  "casa_tables", "casa_casa"])

# Replace some builder commands (lex,yacc) with custom versions
env.CustomCasaCom()
for bopt in env["build"]:
    # create an environment copy with teh dbg/opt compiler flags
    buildenv = env.BuildEnv(bopt)
    buildenv["buildtype"] = bopt
    # buildir name
    buildenv["BUILDDIR"] = Dir("#/build_%s/%s" % (env.PlatformIdent(), bopt))
    env.SConscript(["%s/SConscript" % env["PACKAGE"]], 
		   build_dir= buildenv["BUILDDIR"],
		   duplicate=0, exports=["buildenv", "installer"]) 

# add the Tools to the casacore/share directory. This way they can be imported
# by the other casacore packages without having to duplicate them.
if env["PACKAGE"] == "casa":
    installer.AddShares("tools", "*.py", "casacore/", True)
