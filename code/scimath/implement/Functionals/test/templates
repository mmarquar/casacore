1000 aips/Arrays/Array.cc 
     template class Array<Array<Float> > 
1000 aips/Arrays/ArrayLogical.cc 
     template Bool anyLE(Array<Double> const &, Double const &) 
1000 aips/Arrays/ArrayMath.cc 
     = aips/BasicSL/Complex.h 
     template Array<Complex> operator*(Array<Complex> const &, Array<Complex> const &) 
     template Array<Complex> operator*(Complex const &, Array<Complex> const &) 
     template void indgen(Array<Complex> &) 
     template void indgen(Array<Complex> &, Complex, Complex) 
     template Array<Complex> operator+(Array<Complex> const &, Complex const &) 
1010 aips/Arrays/ArrayMath.cc 
     = aips/BasicSL/Complex.h 
     template void indgen(Array<DComplex> &) 
     template void indgen(Array<DComplex> &, DComplex, DComplex) 
1000 aips/Arrays/MaskedArray.cc aips/Arrays/Array.h 
     template class MaskedArray<Array<Float> > 
1000 aips/Arrays/MatrixMath.cc 
     template Matrix<Double> product(Matrix<Double> const &, Matrix<Double> const &) 
     template Matrix<Float> product(Matrix<Float> const &, Matrix<Float> const &) 
# For tGaussian3D.cc
1000 aips/Arrays/Vector.cc aips/Arrays/Array.h 
     template class Vector<Array<Float> > 
1000 aips/BasicMath/Functional.cc 
     = aips/Arrays/Array.h 
     = aips/BasicSL/Complex.h 
     template class Functional<uInt, Array<Complex> > 
1010 aips/BasicMath/Functional.cc 
     = aips/Arrays/Array.h 
     template class Functional<Float, Array<Float> > 
     template class Functional<Float, Double> 
     template class Functional<Int, Double> 
     template class Functional<uInt, Int> 
     = aips/BasicSL/Complex.h 
     template class Functional<Double, DComplex> 
     template class Functional<uInt, DComplex> 
1020 aips/BasicMath/Functional.cc aips/Arrays/Array.h 
     template class Functional<uInt, Array<Float> > 
     template class Functional<uInt, Array<DComplex> > 
1030 aips/BasicMath/Functional.cc aips/Arrays/Vector.h 
     template class Functional<Vector<Float>, Double> 
     template class Functional<Vector<Int>, Double> 
     = aips/BasicSL/Complex.h 
     template class Functional<Vector<Double>, DComplex> 
     = aips/Arrays/Array.h 
     template class Functional<Vector<Float>, Array<Float> > 
1000 aips/Containers/Block.h aips/Arrays/Array.h 
     template class Block<Array<Float> > 
1000 aips/Functionals/ArraySampledFunctional.cc 
     = aips/Arrays/Array.h 
     template class ArraySampledFunctional<Array<Complex> > 
1010 aips/Functionals/ArraySampledFunctional.cc 
     = aips/Arrays/Array.h 
     template class ArraySampledFunctional<Array<Double> > 
     template class ArraySampledFunctional<Array<Float> > 
1000 aips/Functionals/Function.cc aips/Arrays/Array.h 
     template class Function<Float, Array<Float> > 
1010 aips/Functionals/Function.cc 
     template class Function<Float, Double> 
     template class Function<Int, Double> 
     template ostream & operator<<(ostream &, Function<Double, Double> const &) 
     = aips/BasicSL/Complex.h 
     template class Function<Double, DComplex> 
1000 aips/Functionals/Function1D.h aips/Arrays/Array.h 
     template class Function1D<Float, Array<Float> > 
1010 aips/Functionals/Function1D.h 
     template class Function1D<Float, Double> 
     template class Function1D<Int, Double> 
     = aips/BasicSL/Complex.h 
     template class Function1D<Double, DComplex> 
1000 aips/Functionals/FunctionOrder.cc 
     template class FunctionOrder<Double> 
     template ostream & operator<<(ostream &, FunctionOrder<Double> const &) 
1010 aips/Functionals/FunctionOrder.cc 
     template const String &FunctionOrder<Double>::ident() const 
     template Bool FunctionOrder<Double>::toRecord(String &, RecordInterface &out) const 
     template Bool FunctionOrder<Double>::fromString(String &, String const &) 
     template Bool FunctionOrder<Double>::fromRecord(String &, RecordInterface const &) 
1000 aips/Functionals/FunctionParam.cc 
     template class FunctionParam<Int> 
1000 aips/Functionals/GaussianND.cc 
     template class GaussianND<Float> 
1000 aips/Functionals/GaussianNDParam.cc 
     template class GaussianNDParam<Float> 
1000 aips/Functionals/Interpolate1D.cc aips/Arrays/Array.h 
     template class Interpolate1D<Float, Array<Float> > 
1010 aips/Functionals/Interpolate1D.cc 
     template class Interpolate1D<Float, Double> 
     template class Interpolate1D<Float, Float> 
     template class Interpolate1D<Int, Double> 
     = aips/BasicSL/Complex.h 
     template class Interpolate1D<Double, DComplex> 
1000 aips/Functionals/SampledFunctional.h 
     = aips/Arrays/Array.h 
     = aips/BasicSL/Complex.h 
     template class SampledFunctional<Array<Complex> > 
1010 aips/Functionals/SampledFunctional.h 
     = aips/Arrays/Array.h 
     template class SampledFunctional<Array<Float> > 
1020 aips/Functionals/SampledFunctional.h 
     template class SampledFunctional<Int> 
     = aips/BasicSL/Complex.h 
     template class SampledFunctional<DComplex> 
1000 aips/Functionals/ScalarSampledFunctional.cc 
     template class ScalarSampledFunctional<Int> 
     = aips/BasicSL/Complex.h 
     template class ScalarSampledFunctional<DComplex> 
1000 aips/Mathematics/MatrixMathLA.cc aips/Arrays/Matrix.h 
     = aips/Arrays/Vector.h 
     template void CholeskyDecomp(Matrix<Float> &, Vector<Float> &) 
     template void CholeskySolve(Matrix<Float> &, Vector<Float> &, Vector<Float> &, Vector<Float> &) 
1010 aips/Mathematics/MatrixMathLA.cc aips/Arrays/Matrix.h 
     template Matrix<Float> invertSymPosDef(Matrix<Float> const &) 
     template void invertSymPosDef(Matrix<Float> &, Float &, Matrix<Float> const &) 
1000 aips/Utilities/BinarySearch.cc aips/Containers/Block.h 
     template Int binarySearchBrackets(Bool &, Block<Int> const &, Int const &, uInt, Int) 
1000 aips/Utilities/Copy.cc aips/Arrays/Array.h 
     template void objcopy(Array<Float> *, Array<Float> const *, uInt, uInt, uInt) 
     template void objset(Array<Float> *, Array<Float>, uInt, uInt) 
1000 aips/Utilities/CountedPtr.cc aips/Containers/Block.h 
     = aips/Arrays/Array.h 
     template class CountedConstPtr<Block<Array<Float> > > 
     template class CountedPtr<Block<Array<Float> > > 
     template class PtrRep<Block<Array<Float> > > 
     template class SimpleCountedConstPtr<Block<Array<Float> > > 
     template class SimpleCountedPtr<Block<Array<Float> > > 
1000 aips/Utilities/GenSort.cc aips/Arrays/Vector.h 
     = aips/Containers/Block.h 
     template uInt genSort(Vector<uInt> &, Block<Float> const &) 
1000 trial/Functionals/Gaussian3D.cc 
     = aips/Mathematics/AutoDiffA.h 
     = aips/Mathematics/AutoDiffMath.h 
     template class Gaussian3D<AutoDiffA<Double> > 
1000 trial/Functionals/Gaussian3DParam.cc 
     = aips/Mathematics/AutoDiffA.h 
     = aips/Mathematics/AutoDiffMath.h 
     template class Gaussian3DParam<AutoDiffA<Double> > 
