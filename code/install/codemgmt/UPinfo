#!/bin/echo Usage: source
#-----------------------------------------------------------------------------
# UPinfo: help and general parameters for UP scripts
#-----------------------------------------------------------------------------
# Copyright (C) 2000,2001
# Associated Universities, Inc. Washington DC, USA.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 675 Massachusetts Ave, Cambridge, MA 02139, USA.
#
# Correspondence concerning AIPS++ should be addressed as follows:
#        Internet email: aips2-request@nrao.edu.
#        Postal address: AIPS++ Project Office
#                        National Radio Astronomy Observatory
#                        520 Edgemont Road
#                        Charlottesville, VA 22903-2475 USA
#
# $Id$
#
# The UPinfo script is called as 'source UPinfo' from any of the UP
# executable scripts to get general data. It is assumed that the name of the
# calling script is in the $script variable, and $usage contains the usage.
# Help text can be placed in htxt, hsw, huse and hcrea (each line an element).
# If the -h switch is present, this help information is shown.
#
# Set the result
#
set ok = 0
#
# Set the non-switch arguments
#
set arg = ()
#
# Set the generally allowed switches
#
set upsw = "cdhnru"
#
# Set the allowed switches for appropriate scripts
#
if ("$script" == "UPchange") then
    set upsw = "t$upsw"
else if ("$script" == "UPdup") then
    set upsw = "s$upsw"
else if ("$script" == "UPfind") then
    set upsw = "fg$upsw"
else if ("$script" == "UPlist") then
    set upsw = "l$upsw"
else if ("$script" == "UPlock") then
    set upsw = "$upsw"
else if ("$script" == "UPmove") then
    set upsw = "it$upsw"
else if ("$script" == "UPreident") then
    set upsw = "z$upsw"
else if ("$script" == "UPtmpl") then
    set upsw = "$upsw"
else
    echo "Unknown script ${script} present. Abort."
    exit 1
endif
#
# Set all the switches to initial state
#
foreach i (c d h n r f g i l s t u z)
    set upsw$i = 0
end
#
# Get switches and arguments
#
while ($# > 0)
    if ("$1" =~ "-"*) then
	set x = (`echo "x"$1 | fold -1`)
	shift x
	shift x
	while ($#x > 0)
	    if ("$upsw" =~ *"$x[1]"*) then
		set upsw$x[1] = 1
	    else
	        echo "Illegal or unknown switch '$x[1]' given: discarded"
	    endif
	    shift x
        end
    else if ("$1" =~ "+"*) then
	set x = (`echo "x"$1 | fold -1`)
	shift x
	shift x
	while ($#x > 0)
	    if ("$upsw" =~ *"$x[1]"*) then
		set upsw$x[1] = 0
	    else
	        echo "Illegal or unknown switch '$x[1]' given: discarded"
	    endif
	    shift x
        end
    else
	set arg = ($arg $1)
    endif
    shift
end
#
# Help
#
if ($upswh) then
  if ($?usage) then
    echo "Usage:   $usage"
  endif
  if ($?htxt) then
    while ($#htxt > 0)
	echo "  $htxt[1]"
	shift htxt
    end
  endif
  if ($?huse) then
    echo "Uses:    $huse[1]"
    shift huse
    while ($#huse > 0)
	echo "         $huse[1]"
	shift huse
    end
  endif
  if ($?hcrea) then
    echo "Creates: $hcrea"
  endif
  if ($?hsw) then
    while ($#hsw > 0)
	echo "  $hsw[1]"
	shift hsw
    end
  endif
  if ($?usage) then
    echo "  -c clear all defining information files for this script"
    echo "  -r clear only the general defining information in .def"
    echo "  -u clear all but the general defining information in .def"
    echo "  -d give some debug information (mostly not implemented)"
    echo "  -n run script only to get defining information, without executing"
  endif
  cat << '_EOF_'

The following UP scripts are available:
    UPfind    [-f] [-g] [-c] [-r] [-u] [-d] [-n] <typ>
    UPlist    [-l]      [-c] [-r] [-u] [-d] [-n] <typ>	    
    UPlock              [-c] [-r] [-u] [-d] [-n] <typ>
    UPchange  [-t]      [-c] [-r] [-u] [-d] [-n] <typ>
    UPmove    [-i] [-t] [-c] [-r] [-u] [-d] [-n] <typ>
    UPtmpl              [-c] [-r] [-u] [-d] [-n] <typ>
    UPdup     [-s]      [-c] [-r] [-u] [-d] [-n] <typ>
    UPreident [-z]      [-c] [-r] [-u] [-d] [-n] <typ>
'_EOF_'
  exit 0
endif
#
# Start with no general information
#
if ($upswc) then
    set upswu = 1
    set upswr = 1
endif
unset upswc
unset ldir
unset apath
unset hasm
set touns = (dir mdir xao xai)
set x = ($touns)
while ($#x > 0)
    unset $x[1]
    shift x
end
#
# Check local environment and directory
#
set cdat = `date '+%y%m%d'`
set apath = ($AIPSPATH)
set lhasm = 0
if (-d $apath[1]/master) then
    set lhasm = 1
endif

set ldir = `pwd`
if (! -w $ldir) then
    echo "Local directory ${ldir} not writeable "
    exit 1
endif
#
# Get type
#
if ($#arg < 1) then
    if (-r $ldir/.UpTyPe.$cdat) then
	source $ldir/.UpTyPe.$cdat
    else
	echo "No <typ> given for ${script}"
	exit 1
    endif
    if ("$tp" == "UPfind" || "$tp" == "UPchange" || \
	"$tp" == "UPmove") then
	echo -n "Assuming <typ> as '$tp'. OK? (y|n) [y]: "
	set x = "$<"
	if ("$x" == "" || $x == "y" || "$x" == "Y") then
	else
	    echo "No <typ> given for ${script}"
	    exit 1
	endif
     else
	echo "Assuming <typ> as '$tp'."
     endif
else
    set tp = $arg[1]
    shift arg
endif
#
# Save current type for today
#
touch $ldir/.UpTyPe.xx
rm -f $ldir/.UpTyPe.*
if (! -e $ldir/.UpTyPe.$cdat) then
    echo "set tp = $tp" >! $ldir/.UpTyPe.$cdat
endif
#
# Get info
#
echo "Getting info..."
#
# Clear info if asked
#
if ($upswr) then
  if (-e $ldir/${tp}.def) rm -f $ldir/${tp}.def
endif

if ($upswu) then
  if ("$script" == "UPfind") then 
    if (-e $ldir/${tp}.spat) rm -f $ldir/${tp}.spat
    if (-e $ldir/${tp}.rmpat)  rm -f $ldir/${tp}.rmpat
  else if ("$script" == "UPchange") then
    if (-e $ldir/${tp}.sed) rm -f $ldir/${tp}.sed
    if (-e $ldir/${tp}.rcs) rm -f $ldir/${tp}.rcs
  else if ("$script" == "UPmove") then
    if (-e $ldir/${tp}.sel) rm -f $ldir/${tp}.sel
    if (-e $ldir/${tp}.cfnm) rm -f $ldir/${tp}.cfnm
    if (-e $ldir/${tp}.todo) rm -f $ldir/${tp}.todo
    if (-e $ldir/${tp}_MVF.spat) rm -f $ldir/${tp}_MVF.spat
    if (-e $ldir/${tp}_MVF.rmpat)  rm -f $ldir/${tp}_MVF.rmpat
    if (-e $ldir/${tp}_MV.spat) rm -f $ldir/${tp}_MV.spat
    if (-e $ldir/${tp}_MV.rmpat)  rm -f $ldir/${tp}_MV.rmpat
    if (-e $ldir/${tp}_MV.sed) rm -f $ldir/${tp}_MV.sed
    if (-e $ldir/${tp}_MV.rcs) rm -f $ldir/${tp}_MV.rcs
  else if ("$script" == "UPlist") then 
    if (-e $ldir/${tp}.spat) rm -f $ldir/${tp}.spat
  else if ("$script" == "UPtmpl" || "$script" == "UPlock" || \
	   "$script" == "UPdup" || "$script" == "UPreident") then
  else
    echo "Internal error: '$script' not supported"
    exit 1
  endif 
endif
#
# Get general info
#
if (-r $ldir/${tp}.def) then
   source $ldir/${tp}.def
endif

if ($?hasm) then
    if ($lhasm != $hasm) then
	while ($#touns > 0)
	    unset $touns[1]
	    shift touns
	end
    endif
endif
set hasm = $lhasm

if (! $?dir) then
   set dir = $apath[1]
   set x = ""
   echo "Make sure you have a proper mktree built before proceeding..."
   while ("$x" == "" || ! -d $x/code)
	echo -n "Specify code tree root to be used [$dir]: "
	set x = ($<)
	if ("$x" == "") then
	    set x = "$dir"
	endif
   end
   set dir = "$x"
   unset x
endif 

if (! $?mdir) then
   set x = "~/aips++"
   while (! -d $x/code) 
      echo "Path to local aips++ tree root is not $x"
      echo -n "Specify your local aips++ tree root [$x]: "
      if ("$x" != "") then
	set x = "$<"
      endif
   end
   set mdir = "$x"
   unset x
endif

if ($?xao || ! $?xai) then
    set xao = rao
    set xai = rai
    if ($hasm) then
	set xao = ao
	set xai = ai
    endif
endif

if ("$script" == "UPmove" && ! $upswn) then
    set domv = 0
    echo -n "Need to move files first to new directory (y|n) [n]? "
    set x = "$<"
    if ("$x" == "y" || "$x" == "Y") then
        set domv = 1
    endif
    if ($domv  && ! $upswt && ! $hasm) then
	echo "Note: The moving can only be done while logged into aoc, since "
	echo "      it uses the amv command."
	exit 1
    endif
    unset x
endif

if ("$script" == "UPlock" && ! $upswn && ! $hasm) then
    echo "Locked files can only be found while running at the aoc master site"
    exit 1
endif

if (! -e $ldir/${tp}.def) then
   echo "set dir = $dir" >! $ldir/${tp}.def
   echo "set mdir = $mdir" >> $ldir/${tp}.def
   echo "set xao = $xao" >> $ldir/${tp}.def
   echo "set xai = $xai" >> $ldir/${tp}.def
   echo "set hasm = $hasm" >> $ldir/${tp}.def
endif 
#
# Correct result
#
set ok = 1
exit 0
#
