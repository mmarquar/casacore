#-----------------------------------------------------------------------------
# makefile.ftn: Generic AIPS++ FORTRAN subroutine compilation makefile
#-----------------------------------------------------------------------------
#
#   Copyright (C) 1992-1996,2000
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#-----------------------------------------------------------------------------
# This GNU makefile is included by other AIPS++ makefiles and is not intended
# for stand-alone use.
#
# Original: 1993/01/06 by Mark Calabretta, ATNF
# $Id$
#=============================================================================

# AIPS++ fundamentals.
#---------------------
AIPSROOT := $(word 1, $(AIPSPATH))
AIPSARCH := $(AIPSROOT)/$(word 2, $(AIPSPATH))
include $(AIPSARCH)/makedefs

PCKGMOD := $(subst /,-,$(subst $(AIPSCODE)/,,$(CODEDIR)))
MODULE  := $(word 3,$(subst -,$(space),$(PCKGMOD)))
 
# Get architecture-specific module-specific definitions.
-include $(INSTARCH)/$(PCKGMOD).defs

PCKGLANG := $(PACKAGE)_f


# Temporary directories.
#-----------------------
TMPPCKGD := $(ARCHTMPD)/$(PCKGLANG)
PCKGDBGD := $(TMPPCKGD)/dbg
PCKGOPTD := $(TMPPCKGD)/opt

FIRST := $(shell amkdir -p ug=rwx,g+s,o=rx -v $(PCKGDBGD) $(PCKGOPTD))


# Libraries.
#-----------
LIBDBG   := $(LIBDBGD)/lib$(PCKGLANG).$(SFXSTAT)
LIBOPT   := $(LIBOPTD)/lib$(PCKGLANG).$(SFXSTAT)

AIPSLIBS :=
ifneq "$(word 5,$(LIB$(PACKAGE)))" "defeat"
   AIPSLIBS += $(LIBDBG)
endif
ifneq "$(word 6,$(LIB$(PACKAGE)))" "defeat"
   AIPSLIBS += $(LIBOPT)
endif

ifdef AIPSLIBS
   override LIB := lib
else
   override LIB :=
endif

ifndef PGMRLIBD
   override PGMRLIBD := .
endif

PGMRLIBR := $(PGMRLIBD)/lib$(PCKGLANG).$(SFXSTAT)
ifeq "$(PGMRLIBD)" "."
   ifneq "$(MODULE)" ""
      PGMRLIBR := ../lib$(PCKGLANG).$(SFXSTAT)
   endif
endif


# Source lists.
#--------------
AIPSFTNS := $(filter %.f,$(AIPSSRCS))
PGMRFTNS := $(wildcard *.f)


# Lock files.
#------------
LOCKDBG  := $(PCKGDBGD)/BUILD.$(JOBIDENT)
LOCKOPT  := $(PCKGOPTD)/BUILD.$(JOBIDENT)


# Paths.
#-------
vpath %.f $(CODEDIR)


# Pattern rules.
#---------------
lib(%.o) : $(addsuffix (%.o),$(AIPSLIBS)) ;

$(addsuffix (%.o),$(AIPSLIBS)) : $(CODEDIR)/%.f
	-@ echo ""
        ifneq "$(word 5,$(LIB$(PACKAGE)))" "defeat"
	   -@ echo "$(basename $%) (dbg)"
	    @ $(FC) -c $(FCDBG) -o $(PCKGDBGD)/$(<F:f=o) $<
	   -@ $(TIMER)
        endif
        ifneq "$(word 6,$(LIB$(PACKAGE)))" "defeat"
	   -@ echo "$(basename $%) (opt)"
	    @ $(FC) -c $(FCOPT) -o $(PCKGOPTD)/$(<F:f=o) $<
	   -@ $(TIMER)
        endif
	@ [ -f $(LOCKDBG) -o -f $(LOCKOPT) ] || updatelib $(PCKGLANG)

# Programmer-oriented pattern rules.
ifeq "$(MAKEMODE)" "programmer"
   mylib(%.o) : $(PGMRLIBR)(%.o)
	@ if [ -f "$(PGMRLIBD)/$%" ] ; then \
	     cd $(PGMRLIBD) ; \
	     $(AR) $(ARFLAGS) $(PGMRLIBR) $% ; \
	     $(RM) $% ; \
	     $(RANLIB) $(PGMRLIBR) ; \
	  fi

   $(PGMRLIBR)(%.o) : %.f
	-@ echo ""
	 @ $(FC) -c $(FFLAGS) -o $(PGMRLIBD)/$% $<

   $(PGMRLIBD)/%.o : %.f
	-@ echo ""
	 @ $(FC) -c $(FFLAGS) -o $@ $<

   %.o : %.f

   ifneq "$(PGMRLIBD)" "."
      %.o : $(PGMRLIBD)/%.o ;
   endif

   % : $(PGMRLIBR)(%.o) ;
endif

# Defeat builtin pattern rules.
(%) : %


# Static and static pattern rules.
#---------------------------------
.PRECIOUS : $(LIBDBG) $(LIBOPT)

.PHONY : build_lock lib libdbg ranlib updatelib

allsys : $(LIB)

.cleancode ::
	-$Q cd $(CODEDIR) && $(RM) *.o

.cleansys ::
	-$Q $(RM) $(PCKGDBGD)/BUILD.*
	-$Q $(RM) $(PCKGOPTD)/BUILD.*
	-$Q $(RM) $(LIBDBG)
	-$Q $(RM) $(LIBOPT)

lib : build_lock $(foreach OBJ,$(AIPSFTNS:.f=.o), \
    $(addsuffix ($(OBJ)),$(AIPSLIBS))) updatelib
	-@ $(RM) $(LOCKDBG)
	-@ $(RM) $(LOCKOPT)

lib :
	@ for i in $$SUBDIRS ; do \
	     $(MAKE) -C $$i $@ ; \
	  done

build_lock :
	-@ echo ""
	-@ echo "Begin FORTRAN library rebuild"
	-@ $(TIMER)
        ifneq "$(word 5,$(LIB$(PACKAGE)))" "defeat"
	    @ adate > $(LOCKDBG)
	   -@ echo ""
	   -@ echo "Debug compile command is:"
	   -@ echo "$(FC) $(FCDBG) -c ???.f"
        endif
        ifneq "$(word 6,$(LIB$(PACKAGE)))" "defeat"
	    @ adate > $(LOCKOPT)
	   -@ echo ""
	   -@ echo "Optimized compile command is:"
	   -@ echo "$(FC) $(FCOPT) -c ???.f"
        endif

updatelib :
	@ updatelib $(PCKGLANG)

ranlib :
        ifneq "$(word 5,$(LIB$(PACKAGE)))" "defeat"
	   @ $(RANLIB) $(LIBDBG)
	   @ chmod 664 $(LIBDBG)
        endif
        ifneq "$(word 6,$(LIB$(PACKAGE)))" "defeat"
	   @ $(RANLIB) $(LIBOPT)
	   @ chmod 664 $(LIBOPT)
        endif

# Programmer-oriented static rules.
ifeq "$(MAKEMODE)" "programmer"
   .PRECIOUS : $(PGMRLIBR) $(PGMRLIBD)/%.o

   .PHONY : mylib mylibs update_mylib

   all : $(PGMRFTNS:%.f=$(PGMRLIBR)(%.o)) update_mylib

   .clean ::
	-cd $(PGMRLIBD) && $(RM) *.o a.out core

   .cleaner ::
	-$(RM) $(PGMRLIBR)

   mylibs : mylib
	@ for i in $$SUBDIRS ; do \
	     $(MAKE) -C $$i $@ ; \
	  done

   mylib : $(PGMRLIBR) ;

   $(PGMRLIBR) : $(PGMRFTNS:%.f=$(PGMRLIBR)(%.o)) \
                 $(AIPSFTNS:%.f=$(PGMRLIBR)(%.o)) update_mylib ;

   update_mylib :
	@ cd $(PGMRLIBD) ; \
	  PGMROBJS="$(sort $(PGMRFTNS:%.f=%.o) $(AIPSFTNS:%.f=%.o))" ; \
	  [ "$$PGMROBJS" != "" ] && PGMROBJS=`ls $$PGMROBJS 2>/dev/null` ; \
	  if [ "$$PGMROBJS" != "" ] ; then \
	     $(AR) $(ARFLAGS) $(PGMRLIBR) $$PGMROBJS ; \
	     $(RM) $$PGMROBJS ; \
	     $(RANLIB) $(PGMRLIBR) ; \
	  fi
endif

show_local :
	-@ echo ""
	-@ echo "Variables defined in the fortran makefile"
	-@ echo "========================================="
	-@ echo ""
	-@ echo "System"
	-@ echo "------"
	-@ echo "MODULE  =$(MODULE)"
	-@ echo "PCKGMOD =$(PCKGMOD)"
	-@ echo "PCKGLANG=$(PCKGLANG)"
	-@ echo ""
	-@ echo "TMPPCKGD=$(TMPPCKGD)"
	-@ echo "PCKGDBGD=$(PCKGDBGD)"
	-@ echo "PCKGOPTD=$(PCKGOPTD)"
	-@ echo ""
	-@ echo "LIBDBG  =$(LIBDBG)"
	-@ echo "LIBOPT  =$(LIBOPT)"
	-@ echo "AIPSLIBS=$(AIPSLIBS)"
	-@ echo "LOCKDBG =$(LOCKDBG)"
	-@ echo "LOCKOPT =$(LOCKOPT)"
	-@ echo ""
	-@ echo "AIPSFTNS=$(AIPSFTNS)"
	-@ echo ""
	-@ echo "Programmer"
	-@ echo "----------"
	-@ echo "PGMRLIBR=$(PGMRLIBR)"
	-@ echo "PGMRFTNS=$(PGMRFTNS)"

help ::
	-@ echo ""
	-@ echo "Targets defined in the fortran makefile"
	-@ echo "======================================="
	-@ echo ""
	-@ echo "System"
	-@ echo "------"
	-@ echo "   lib(%.o): compile a module and insert it into the system
	-@ echo "             libraries (debug and/or optimized)."
	-@ echo "        lib: build the system libraries."
	-@ echo "  updatelib: insert all object modules into the system"
	-@ echo "             libraries and ranlib them."
	-@ echo "     ranlib: ranlib the system libraries."
	-@ echo ""
	-@ echo "Programmer"
	-@ echo "----------"
	-@ echo " mylib(%.o): compile a subroutine and insert it into a"
	-@ echo "             private library."
	-@ echo "        %.o: compile a subroutine."
	-@ echo "          %: same as mylib(%.o)."
	-@ echo "      mylib: build a private library from all local and."
	-@ echo "             system sources."
	-@ echo "     mylibs: invoke mylib in this directory and all"
	-@ echo "             subdirectories."
	-@ echo "update_mylib: insert all object modules into a private"
	-@ echo "             library and ranlib it."
