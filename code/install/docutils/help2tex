#!/usr/local/bin/perl5
#
#   Copyright (C) 1996,1997
#   Associated Universities, Inc. Washington DC, USA.
#
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 2 of the License, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
#   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#   more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   675 Massachusetts Ave, Cambridge, MA 02139, USA.
#
#   Correspondence concerning AIPS++ should be addressed as follows:
#          Internet email: aips2-request@nrao.edu.
#          Postal address: AIPS++ Project Office
#                          National Radio Astronomy Observatory
#                          520 Edgemont Road
#                          Charlottesville, VA 22903-2475 USA
#
#   $Id$
#
use Getopt::Long;

$/ = "";
$* = 1;
$mtext = "[^}]*";
$wlabel = "\\subsubsection";
$theText = "";
$args = "";
$end_section = "\\vspace{.18in}\n\\hrule";
   
   # OK first we make sure we can tokenize everything by adding an endaips2help
   # token after the \\end{ah}
$result = &GetOptions('glish', 'noheaders', 'package=s');
if($opt_noheaders == 0 && $opt_glish == 0){
   print "\\documentclass{book}\n";
   print "\\usepackage{html, longtable, epsfig}\n";
   print "\\begin{document}\n";   
   print "\\newcommand{\\helptab}{\n";
   print "\\begin{tabular*}{4.70in}{|p{1in}p{0.36in}p{2.79in}|}\n";
   print "}\n";
   print "\\begin{htmlonly}\n";
   print "\\renewcommand{\\helptab}{\n";
   print "\\begin{tabular*}{4.70in}{|p{1in}p{0.75in}p{2.38in}|}\n";
   print "}\n";
   print "\\end{htmlonly}\n";
}

if($opt_glish == 1){
   $pack = "help::pkg.$opt_package";
   print "$pack := [=];\n";
}



foreach $file (@ARGV) {
   &fetch_raw_help($file, 'fh00');
   foreach $moduleN (split(/beginaips2module/, $theText)){
      $objectText = "";
      foreach $objectN (split(/beginaips2object/, $moduleN)){
         &make_tex_file($objectN);
         &term_object($firstPass);
         $objectText .= $_;
      }
      $isObj = 0;
      &term_module($objectText);
   }
}
if($opt_noheaders == 0 && $opt_glish == 0){
   print "\\end{document}\n";
}

sub fetch_raw_help{
   local($filename, $readme)  = @_;
   $readme++;
   open($readme, $filename);
   while(<$readme>){
      s/\\%/escapedpercent/g;
      s/%.*//g;
      s/escapedpercent/\\%/g;
      s/(\\begin{ahmodule})/beginaips2module $1/g;
      s/(\\begin{ahobject})/beginaips2object $1/g;
      s/(\\begin{ahfunction})/beginaips2help $1/g;
      s/(\\begin{ahconstructor})/beginaips2help $1/g;
      s/(\\begin{ahrecord})/beginaips2help $1/g;
      s/(\\end{ahrecord})/beginaips2help $1/g;
      s/\\documentclass.*//g;
      s/\\usepackage.*//g;
      s/\\begin{document}//g;
      s/\\end{document}//g;
      if(/\\input{($mtext)}/){
         foreach $inputfile(split(/\n/, $_)){
            if($inputfile =~ /\\input{(.*)}/){
               &fetch_raw_help($1, $readme); 
               $inputfile =~ s/\\input{(.*)}/$itext/g;
            }
         }
      }
      if(/\\include{($mtext)}/){
         foreach $inputfile(split(/\n/, $_)){
            if($inputfile =~ /\\input{(.*)}/){
               &fetch_raw_help($1, $readme); 
               $inputfile =~ s/\\include{(.*)}/$itext/g;
            }
         }
      }
      $theText .= $_;
   }
   close $readme;
   return;
}

sub term_module{
   local($theRawText) = @_;
   $_ = $theRawText;
#
   $objs_count = %objs;
   $objItems = "";
   if($objs_count > 0){
      for($i=0;$i<@objsid;$i++){
          $key = $objsid[$i];
          $objItems .= "\\htmlref{$key}{$mname:$key} & $objs{$key}\\\\\n";
          delete $objs{$key};
       }
       s/\\ahobjs{}/
\\subsubsection*{Objects}
\\begin{longtable}{ll}
$objItems
\\end{longtable}/g;
   } else {
       s/\\ahobjs{}//g;
   }
   $funs_count = %funcs;
   local $funItems = "";
   if($funs_count > 0){
#      foreach $key (keys %funcs) {
     for ($i=0; $i<@funcsid; $i++){
        $key = $funcsid[$i];
        # print $i, $key;
        $funItems .= "\\htmlref{$key}{$mname:$key} & $funcs{$key}\\\\\n";
      }
      s/\\ahfuncs{}/
\\subsubsection*{Functions}
\\begin{longtable}{ll}
$funItems
\\end{longtable}/g;
    }

#
   s/\\ahobjs{}//g;
   s/\\ahfuncs{}//g;
   s/\\ahmethods{}//g;
   if($opt_glish == 0){
      print;
   }
   print "\n";
   return;
}

sub term_object{
   local($theRawText) = @_;
   $_ = $theRawText;
   $wlabel = "\\subsubsection";
   local $methodItems = "";
   if($has_methods == 1){
#     foreach $key (keys %{$methods{$oname}}) {
#        $methodItems .= "\\htmlref{$key}{$mname:$oname.$key} & $methods{$oname}{$key}\\\\\n";
     for($i=0;$i<@{$methodsid{$oname}};$i++) {
        $key = $methodsid{$oname}[$i];
        # print "Your are here ", $i, " ", $key, "\n";
        $methodItems .= "\\htmlref{$key}{$mname:$oname.$key} & $methods{$oname}{$key}\\\\\n";
     }
     s/\\ahmethods{}/
   \\subsubsection*{Methods}
   \\begin{longtable}{ll}
   $methodItems
   \\end{longtable}/g;
     s/\\ahfuncs{}/
   \\subsubsection*{Methods}
   \\begin{longtable}{ll}
   $methodItems
   \\end{longtable}/;
   }
   $has_methods = 0;
   return;
}

sub make_tex_file{
   local($theRawText) = @_;   
   # Now we split the the text into several pieces we can handle
   
   $firstPass = "";
   foreach $thing (split(/beginaips2help/, $theRawText)){
      $_ = $thing;
      if(/\\begin{ahmodule}\s*{($mtext)}\s*{($mtext)}/){
         $isObj = 0;
         $terminateObject = 0;
         $mname = $1;
         $wlabel = "\\subsection";
         $has_methods = 0;
         $iname = $1;
         $dum = $2;
         $iname =~ s/\\_/_/g;
         undef @funcsid;
         undef @objsid;
         if($opt_glish == 1){
            print "$pack.$mname := [=];\n";
            print "$pack.$mname.objs := [=];\n";
            print "$pack.$mname.funs := [=];\n";
            $argroot ='';
            $dum =~ s/[\n\']/ /g;
            print "$pack.$mname.d := '$dum';\n";}
      }
      if(/\\begin{ahobject}\s*{($mtext)}\s*{($mtext)}/){
         $oname = $1;
         $terminateObject = 0;
         $objs{$1} = $2;
         push @objsid, $1;
         $isObj = 1;
         $wlabel = "\\subsubsection";
         $has_methods = 0;
         $iname = $1;
         $dum = $2;
         $iname =~ s/\\_/_/g;
         $oiname = $iname;
         if($opt_glish == 1){
            print "$pack.$mname.objs.$oiname := [=];\n";
            print "$pack.$mname.objs.$oiname.m := [=];\n";
            $argroot ='';
            $dum =~ s/[\n\']/ /g;
            print "$pack.$mname.objs.$oiname.d := '$dum';\n";}
         undef @methodsid{$oname};
      }
      if(/\\begin{ahconstructor}\s*{($mtext)}\s*{($mtext)}/){
         $args = "";
         $methods{$oname}{$1} = $2;
         push @{$methodsid{$oname}}, $1;
         # print "Adding ", $1, @{$methodsid{$oname}}, "\n";
         $wlabel = "\\paragraph";
         $fname = $1;
         $iname = $1;
         $dum = $2;
         $iname =~ s/\\_/_/g;
         $argroot ='';
         if($opt_glish == 1){
            print "$pack.$mname.objs.$oiname.m.$iname := [=];\n";
            $dum =~ s/[\n\']/ /g;
            print "$pack.$mname.objs.$oiname.m.$iname.d := '$dum';\n";}
      }
      $recIndent = "";
      if(/\\begin{ahrecord}/){
         $recIndent = "\\hspace{0.25in}";
      }
      if(/\\begin{ahfunction}\s*{($mtext)}\s*{($mtext)}/){
         $args = "";
         $fname = $1;
         $iname = $1;
         $dum = $2;
         $iname =~ s/\\_/_/g;
         $argroot ='';
         if($isObj == 1){
            $has_methods = 1;
            $methods{$oname}{$fname} = $dum;
            push @{$methodsid{$oname}}, $fname;
            # print "Adding ", $fname, @{$methodsid{$oname}},"\n";
            $wlabel = "\\paragraph";
            $argroot = "$pack.$mname.objs.$oname.m.$iname";
            if($opt_glish == 1){
               $argroot = "$pack.$mname.objs.$oiname.m.$iname";
               print "$argroot := [=];\n";
               $dum =~ s/[\n\']/ /g;
               print "$argroot.d := '$dum';\n"; }
         }else{
            push @funcsid, $fname;
            $funcs{$fname} = $dum;
            $wlabel = "\\subsubsection";
            $argroot = "$pack.$mname.funs.$iname";
            if($opt_glish == 1){
               print "$argroot := [=];\n";
               print "$argroot.a := [=];\n";
               $dum =~ s/[\n\']/ /g;
               print "$argroot.d := '$dum';\n";}
         }
      }
   
     # Build an argument list from addarg, used for synopsis
   
     $hasArgs = 0;
     $dtext = ".*[\s]*.*";
     while(/\\ahaddarg{($dtext)}\s*{($dtext)}\s*{($dtext)}\s*{($dtext)}/g){
       $args .= ($1.", ");
       $hasArgs = 1;
       if($opt_glish == 1 && length $argroot){
          $glish_arg = $1;
          $desc = $2;
          $def = $3;
          $dum = $4;
          $glish_arg =~ s/\\_/_/g;
          $glish_arg =~ s/\.\.\./dots/g;
          $glish_arg =~ s/ /_/g;
          $desc =~ s/[\n\']/ /g;
          print "$argroot.a.$glish_arg := [=];\n";
          print "$argroot.a.$glish_arg.d := '$desc';\n";
          $def =~ s/[\n\']/ /g;
          print "$argroot.a.$glish_arg.def := '$def';\n";
          $dum =~ s/[\n\']/ /g;
          print "$argroot.a.$glish_arg.a := '$dum';\n";
       }
     }
     if($hasArgs == 1){
        $args =~ s/, $//g;
     }
     if($opt_glish == 1 && length $argroot){
        $glish_args = $args;
        $glish_args =~ s/\\_/_/g;
        print "$argroot.s := '$iname($glish_args)';\n";
     }
   
   # substitutions go here

      s/\\end{ahfunction}/$end_section/g;
   
      if($isObj == 1){
         s/\\begin{ahfunction}\s*{($mtext)}\s*{($mtext)}/
   \\subsection{$oname.$1 - $mname.$oname:Method \\label{$mname:$oiname.$iname}\\index{$1}\\index{$mname.$oname.$1}}
   $2
   \\ahsynopsis{$1}
   /g;
      } else {
         s/\\begin{ahfunction}\s*{($mtext)}\s*{($mtext)}/
   \\subsection{$1 - $mname:Function \\label{$mname:$iname}\\index{$1}\\index{$mname.$1}}
   $2
   \\ahsynopsis{$1}
   /g;
      }
      if(/\\end{ahobject}/ || /\\end{ahmodule}/){
         $isObj = 0;
      }
      s/\\end{ahobject}/$end_section/g;
   
      s/\\begin{ahobject}\s*{($mtext)}\s*{($mtext)}/
   \\subsection{$1 - $mname:Object \\label{$mname:$iname}\\index{$1}\\index{$mname.$1}}
   $2\\\\/g;
   
      s/\\end{ahconstructor}/$end_section/g;
      s/\\begin{ahconstructor}\s*{($mtext)}\s*{($mtext)}/
   \\subsection{$1 - $mname.$oname:Constructor \\label{$mname:$oiname.$iname}\\index{$1}\\index{$mname.$oname.$1}}
   $2
   \\ahsynopsis{$1}
   /g;
  
     s/\\end{ahmodule}/$end_section
   \\newpage/g;
   
     s/\\begin{ahmodule}\s*{($mtext)}\s*{($mtext)}/
   \\section{$1 - Module \\label{$iname}\\index{$1}}
   $2\\\\/g;
   
     s/\\ahinclude{($mtext)}/include \"$1\"/g;
   
     s/\\ahcategory{($mtext)}//g;
     s/\\end{ahdescription}//g;
     s/\\begin{ahdescription}/$wlabel*{Description}/g;
     s/\\end{ahrecord}/\\hline/g;
     s/\\begin{ahrecord}{($mtext)}{($mtext)}/
       \\hline
       $1 -- Record & $2\\\\/g;

     s/\\end{ahdata}/\\end{longtable}/g;
     s/\\begin{ahdata}/
     $wlabel*{Attributes} -- Public Data
     \\begin{longtable}{|p{1.5in}p{4.0in}|}
     \\hline
     ID & Description \\\\
     \\hline
     \\endhead
     \\hline
     \\endfoot/g;
     s/\\ahdatum{($mtext)}\s*{($mtext)}\s*{}\s*{}/
       $recIndent $1 \& $2\\\\/g;
     s/\\ahdatum{($mtext)}\s*{($mtext)}\s*{($mtext)}\s*{}/
       $recIndent $1 \& $2\\\\
          \& Default: $3\\\\/g;
     s/\\ahdatum{($mtext)}\s*{($mtext)}\s*{}\s*{($mtext)}/
          $recIndent $1 \& $2\\\\
          \& Allowed: $3\\\\/g;
     s/\\ahdatum{($mtext)}\s*{($mtext)}\s*{($mtext)}\s*{($mtext)}/
       $recIndent $1 \& $2\\\\
          \& Allowed: $4\\\\
          \& Default: $3\\\\/g;

     s/\\end{ahaipsrc}/\\end{tabular*}/g;
   
     s/\\begin{ahaipsrc}/$wlabel*{Aipsrc Variables}
   \\hfill \\\\
   \\helptab
   \\hline/g;
   
#
     s/\\end{ahargs}/\\end{tabular*}/g;
   
     s/\\begin{ahargs}/$wlabel*{Arguments}
   \\hfill \\\\
   \\helptab
   \\hline/g;

     s/\\end{ahargslong}/\\end{longtable}/g;
   
     s/\\begin{ahargslong}/$wlabel*{Arguments}
   \\hfill \\\\
   \\begin{longtable}{|p{1in}p{0.39in}p{2.79in}|}
   \\hline/g;
   #\\begin{tabular*}{4.70in}{|p{1in}|p{3.29in}|}
   
     s/\\ahaddarg{($mtext)}\s*{($mtext)}\s*{\s*}\s*{\s*}/
   $1 \& \\multicolumn{2}{p{3.36in}|}{$2}\\\\ \\hline/g;

     s/\\ahaddarg{($mtext)}\s*{($mtext)}\s*{}\s*{($mtext)}/
   $1 \& \\multicolumn{2}{p{3.36in}|}{$2}\\\\
      \& Allowed: \& $3\\\\ \\hline/g;
   
     s/\\ahaddarg{($mtext)}\s*{($mtext)}\s*{($mtext)}\s*{}/
   $1 \& \\multicolumn{2}{p{3.36in}|}{$2}\\\\
   \& Default: \& $3 \\\\ \\hline/g;
   
     s/\\ahaddarg{($mtext)}\s*{($mtext)}\s*{($mtext)}\s*{($mtext)}/
   $1 \& \\multicolumn{2}{p{3.36in}|}{$2}\\\\
   \& Allowed: \& $4\\\\
   \& Default: \& $3  \\\\ \\hline/g;
   
     s/\\ahsynopsis{($mtext)}/$wlabel*{Synopsis}
   $1($args)/g;
     s/\\ahreturns{($mtext)}/$wlabel*{Returns}
   $1\\\\/g;
   
     s/\\end{ahexample}//g;
     s/\\begin{ahexample}/$wlabel*{Example}/g;
     s/\\end{ahseealso}//g;
     s/\\begin{ahseealso}/$wlabel*{See Also}/g;
     s/\\ahkeyword{($mtext)}\s*{($mtext)}/\\index{$1}\\index{$mname.$1}/g;
     s/\\ahkeyword{($mtext)}\s*{}/\\index{$1}\\index{$mname:$1}/g;
     s/\\ahkeyword{($mtext)}/\\index{$1}\\index{$mname:$1}/g;
     s/\\ahlink{($mtext)}\s*{($mtext)}/\\htmlref{$1}{$2}/g;
     s/\\end{ahcomments}//g;
     s/\\begin{ahcomments}//g;

     $firstPass .= $_;
   }

   return;
}
