1000 aips/Arrays/Array.cc 
     = aips/Quanta/MVEpoch.h 
     template class Array<MVEpoch> 
1000 aips/Arrays/ArrayMath.cc aips/Quanta/Quantum.h 
     template Array<Quantum<Double> > operator*(Quantum<Double> const &, Array<Quantum<Double> > const &) 
     template Array<Quantum<Double> > operator-(Array<Quantum<Double> > const &) 
     template void operator*=(Array<Quantum<Double> > &, Array<Quantum<Double> > const &) 
1000 aips/Arrays/MaskedArray.cc 
     = aips/Quanta/MVEpoch.h 
     template class MaskedArray<MVEpoch> 
1000 aips/Arrays/Vector.cc 
     = aips/Quanta/MVEpoch.h 
     template class Vector<MVEpoch> 
1000 aips/Quanta/QLogical.cc aips/Arrays/Vector.h 
     template Bool operator==(Quantum<Vector<Double> > const &, Quantum<Vector<Double> > const &) 
     template Bool operator==(Quantum<Vector<Double> > const &, Vector<Double> const &) 
1000 aips/Quanta/QMath.cc aips/Arrays/Vector.h 
     = aips/BasicSL/Complex.h 
     template Quantum<Vector<Double> > operator*(Vector<Double> const &, Quantum<Vector<Double> > const &) 
     template Quantum<Complex> operator*(Complex const &, Quantum<Complex> const &) 
     template Quantum<Complex> ceil(Quantum<Complex> const &) 
     template Quantum<Complex> floor(Quantum<Complex> const &) 
     template Quantum<Complex> abs(Quantum<Complex> const &) 
1000 aips/Utilities/Copy.cc 
     = aips/Quanta/MVEpoch.h 
     template void objcopy(MVEpoch *, MVEpoch const *, uInt) 
     template void objcopy(MVEpoch *, MVEpoch const *, uInt, uInt, uInt) 
     template void objset(MVEpoch *, MVEpoch, uInt) 
     template void objset(MVEpoch *, MVEpoch, uInt, uInt) 
1000 aips/Utilities/CountedPtr.cc aips/Containers/Block.h 
     = aips/Quanta/MVEpoch.h 
     template class CountedConstPtr<Block<MVEpoch> > 
     template class CountedPtr<Block<MVEpoch> > 
     template class PtrRep<Block<MVEpoch> > 
     template class SimpleCountedConstPtr<Block<MVEpoch> > 
     template class SimpleCountedPtr<Block<MVEpoch> > 
