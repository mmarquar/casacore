import os
import sys

# Put the package name here, e.g. casa, tables
PACKAGE="msfits"

# general options
opts = Options( 'options.cfg', ARGUMENTS )
opts.Add(ListOption("build", "The build type", 
                    "opt", ["opt", "dbg"]))
opts.Add(ListOption("libtype", "The type of library to build", 
                    "static", ["static", "shared"]))
opts.Add(BoolOption("tests", "Build the tests?", False))
opts.Add(PathOption("casacoredir", "The location of casacore/casa",
                    "/usr"))
opts.Add(("CC", "The c compiler", None))
opts.Add(("CXX", "The c++ compiler", None))
opts.Add(("FORTRAN", "The fortran compiler", None))
opts.Add(("f2clib", "The fortran to c library", None))

env = Environment(
		  ENV = { 'PATH' : os.environ[ 'PATH' ],
			  'HOME' : os.environ[ 'HOME' ]			  
			  },
		  options=opts
		  )
# keep a local sconsign database, rather than in very directory
env.SConsignFile()

env["PACKAGE"] = PACKAGE
if env["PACKAGE"] == "casa":
    # use build in dir
    env["casashrdir"] = ["./tools"]
    env["casalibdir"] = None
    env["casaincdir"] = None
else:
    # use directory from casacore/casa installation
    env["casaincdir"] = [os.path.join(env["casacoredir"],"include","casacore")]
    env["casalibdir"] = [os.path.join(env["casacoredir"],"lib")]
    env["casashrdir"] = [os.path.join(env["casacoredir"],"share","casacore")]

env.Tool('buildenv', env["casashrdir"])
env.Tool('utils', env["casashrdir"])
env.Tool('installer', env["casashrdir"])
env.Tool('casa', env["casashrdir"])
# add installer options, e.g. prefix
env.AddInstallerOptions( opts )
# add them into environment
opts.Update( env )
# cache them for the next run
opts.Save( 'options.cfg', env)
Help( opts.GenerateHelpText( env ) )

# Auto configure
if not env.GetOption('clean'):
    conf = Configure(env)
    # test for cfitsio
    # do two test as cfitsio 2/3 have different include layout
    if not conf.CheckLib("m"): Exit(1)
    if not conf.CheckLib('cfitsio'):
        if not conf.CheckHeader('fitsio.h', language='c'):
            if not conf.CheckHeader('cfitsio/fitsio.h', language='c'):
                Exit(1)
            else:
                # add cfitsio inc path
                pass
                #env.Append(CPPPATH=['something/cfitsio'])
    # test for lapack
    if env['PLATFORM'] == "darwin":
        print "Using vecLib"
        # no test neccessary as it ships with vecLib
        conf.env.Append(FRAMEWORKS=["vecLib"])
    else:
        if not conf.CheckLib('lapack'): Exit(1)
        if not conf.CheckLib('blas'): Exit(1)

    conf.env.CheckFortran(conf)
    env = conf.Finish()

# create the installer which handles installing the final build
installer = env.Installer()

# to find package based includes
env.Append(CPPPATH=['#'])
env.AppendUnique(CPPPATH=env["casaincdir"])
env.AppendUnique(LIBPATH=env["casalibdir"])
env.Prepend(LIBS=[ "casa_ms", "casa_fits",
		   "casa_measures", "casa_scimath", "casa_scimath_f", 
		   "casa_tables", "casa_casa"])
# add casa specific defines autodetected from platform
# currently works for darwin/linux(_x86_64), cray doesn't work
# because PGI compiler needs a lot of environment variables
# Probably need to write a PGI builder 
env.AddCasaPlatform()
# Replace some builder commands (lex,yacc) with custom versions
env.CustomCasaCom()
for bopt in env["build"]:
    # create an environment copy with teh dbg/opt compiler flags
    buildenv = env.BuildEnv(bopt)
    buildenv["buildtype"] = bopt
    # buildir name
    buildenv["BUILDDIR"] = Dir("#/build_%s/%s" % (env.PlatformIdent(), bopt))
    env.SConscript(["%s/SConscript" % env["PACKAGE"]], 
		   build_dir= buildenv["BUILDDIR"],
		   duplicate=0, exports=["buildenv", "installer"]) 

# add the Tools to the casacore/share directory. This way they can be imported
# by the other casacore packages without having to duplicate them.
if env["PACKAGE"] == "casa":
    installer.AddShares("tools", "*.py", "casacore/", True)
